#!/usr/bin/env python

from __future__ import print_function
import argparse
import os
import sys
import re
import getpass
import errno
import requests
import json
import textwrap
from tempfile import mkstemp
from urlparse import urlparse, urljoin
from subprocess import check_call, Popen, PIPE, CalledProcessError

try:
    from subprocess import check_output
except ImportError:
    # Backport check_output for Python 2.6
    def check_output(*popenargs, **kwargs):
        """ Run command with arguments and return its output as byte string. """
        if 'stdout' in kwargs:
            raise ValueError('stdout argument not allowed, it will be overridden.')
        process = Popen(stdout=PIPE, *popenargs, **kwargs)
        output, unused_err = process.communicate()
        retcode = process.poll()
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
            raise CalledProcessError(retcode, cmd, output=output)
        return output


################################################
# Global Vars
################################################


# Set git variables
try:
    GIT_EDITOR = check_output('git var GIT_EDITOR', shell=True).strip()
except CalledProcessError as e:
    sys.exit('Git not configured properly: %s' % e)

try:
    GIT_REMOTE = check_output('git config branch.master.remote',
                              shell=True).strip() # Assume "master"
    GIT_REMOTE_URL = check_output('git config remote.%s.url' % GIT_REMOTE,
                                  shell=True).strip()
except CalledProcessError as e:
    sys.exit('Not a git repository or no "master" branch: %s' % e)

# Set Github variables
GH_USER = getpass.getuser()
if GIT_REMOTE_URL.startswith('git@github.com:'):
    GH_PROJECT, ext = os.path.splitext(GIT_REMOTE_URL[15:])

elif GIT_REMOTE_URL.startswith('git@gist.github.com:') or \
     GIT_REMOTE_URL.startswith('git://gist.github.com/'):
    sys.exit('This appears to be a Gist. Gists do not support Github issues.')
else:
    url = urlparse(GIT_REMOTE_URL)
    if url.scheme == 'git' or (url.scheme == 'https' and url.username is None):
        sys.exit('Sorry, you do not appear have write acess to the ' \
                 'Repository at "%s".' % GIT_REMOTE_URL)
    elif url.scheme == 'https' and url.hostname == 'github.com':
        GH_USER = url.username
        GH_PROJECT, ext = os.path.splitext(url.path.lstrip('/'))
    else:
        sys.exit('This Repo does not appear to be hosted at a known Github url.')



##################################################
# Utility Functions
##################################################


def get_pass(user):
    """ Get password for user. """
    if user is None:
        # Prompt for username. Default to GH_USER.
        user = raw_input('Username (%s): ' % GH_USER) or GH_USER
    auth = user.split(':', 1)
    if len(auth) < 2:
        # prompt for password
        auth.append(getpass.getpass())
    return tuple(auth)


class GHAuth(requests.auth.AuthBase):
    """ Attach GitHub Authentication to Request. """

    def __init__(self, user=None):
        self.token = self.username = self.password = None
        if user:
            self.username, self.password = get_pass(user)
        else:
            try:
                self.token = check_output('git config github.token',
                                          shell=True).strip()
            except CalledProcessError:
                self.username, self.password = get_pass(user)

    def __call__(self, r):
        """ Add Authorization header """
        if self.token:
            r.headers['Authorization'] = 'token ' + self.token
        else:
            r.headers['Authorization'] = requests.auth._basic_auth_str(
                                                self.username, self.password)
        return r


def request(method, url, **kwargs):
    """ Request Wrapper to keep things DRY. """
    url = urljoin('https://api.github.com/',
                  url.replace(':user/:repo', GH_PROJECT))
    kwargs['auth'] = GHAuth(kwargs.get('auth', None))
    r = requests.request(method, url, **kwargs)
    try:
        r.raise_for_status()
    except:
        sys.exit('Error: "%s" returned for method "%s" on url: "%s"' % \
                 (json.loads(r.text)['message'], method.upper(), r.url))
    if r.status_code != 204: # 204 is "No Content"
        return json.loads(r.text)
    return True


def run_editor(txt):
    """ Edit the given text in the system default text editor. """

    fd, tmpfile = mkstemp()
    os.write(fd, txt or "")
    os.close(fd)

    try:
        check_call("%s %s" % (GIT_EDITOR, tmpfile), shell=True)
    except CalledProcessError as e:
        os.unlink(tmpfile)
        sys.exit("Action aborted: %s" % e)

    contents = open(tmpfile).read()
    os.unlink(tmpfile)
    return contents


ARG_RE = re.compile(r'^([A-Z]+): (.*)')

def get_message(args, template, use_keys=[]):
    """ Get message from EDITOR. """
    context = {}
    for k, v in args.items():
        if v is None:
            v = ''
        elif k == 'labels':
            v = ' '.join(v)
        if k in use_keys:
            context[k] = v
    message = run_editor(template % context)
    body = []
    end_of_body = False
    new = {}
    for line in message.split('\n'):
        if not line.startswith('#') and not end_of_body:
            body.append(line)
        else:
            end_of_body = True
            m = ARG_RE.match(line)
            if m:
                key = m.group(1).lower()
                value = m.group(2)
                if key == 'labels':
                    value = value.split()
                if value:
                    new[key] = value
    new['body'] = '\n'.join(body).strip()
    if not new['body']:
        sys.exit("Action aborted! Message is empty.")
    return new


def wrap_text(text, width, indent=0):
    """ Wrap text to width. """
    out = []
    for part in text.splitlines():
        out.append(textwrap.fill(part, width, drop_whitespace=False,
            initial_indent=' '*indent, subsequent_indent=' '*indent,
            break_long_words=False))
    return '\n'.join(out)


def truncate(text, size):
    """ Truncate text to size and append '...' if appropriate. """
    return text if len(text) <= size else text[:size-3].rsplit(' ', 1)[0]+'...'

def columns(percentages, width):
    """ return list if widths for given percentages and total width. """
    return [(width*percent/100)-1 for percent in percentages]


def getTerminalSize():
    """ returns terminal size as (lines, columns) """
    import os, struct
    def ioctl_GWINSZ(fd):
        import fcntl, termios
        return struct.unpack("hh", fcntl.ioctl(fd, termios.TIOCGWINSZ, "1234"))
    # try stdin, stdout, stderr
    for fd in (0, 1, 2):
        try:
            return ioctl_GWINSZ(fd)
        except:
            pass
    # try os.ctermid()
    try:
        fd = os.open(os.ctermid(), os.O_RDONLY)
        try:
            return ioctl_GWINSZ(fd)
        finally:
            os.close(fd)
    except:
        pass
    # try `stty size`
    try:
        return tuple(int(x) for x in os.popen("stty size", "r").read().split())
    except:
        pass
    # try environment variables
    try:
        return tuple(int(os.getenv(var)) for var in ("LINES", "COLUMNS"))
    except:
        pass
    # i give up. return default.
    return (25, 80)


class Pager():
    """ Wrap Pager for multiple writes. """

    def __init__(self):
        self.height, self.width = getTerminalSize()
        try:
            cmd = check_output('git var GIT_PAGER', shell=True).strip()
        except CalledProcessError:
            self.proc = None
            self.file = sys.stdout
            return
        self.proc = Popen(cmd, stdin=PIPE)
        self.file = self.proc.stdin

    def write(self, text='', nl=True):
        """ Write text. """
        try:
            self.file.write(text)
        except:
            self.file = sys.stdout
            self.file.write(text)
        if nl:
            self.file.write('\n')

    def close(self):
        """ Flush, send EOF and wait. """
        if self.proc:
            self.file.close()
            try:
                self.proc.wait()
            except KeyboardInterrupt:
                self.proc.kill()
                sys.exit(1)

def clean_args(args, exclude_keys=[], exclude_values=[]):
    """ Remove unwanted keys and/or values from args. """
    d = {}
    for k, v in args._get_kwargs():
        if k not in exclude_keys and v not in exclude_values:
            d[k] = v
    return d

def write_comment(pager, comment):
    """ Format comment and write to pager. """
    pager.write()
    pager.write(' {0[user][login]} commented [{0[id]}]:'.format(comment))
    pager.write(' ' + '='*(pager.width-2))
    pager.write(wrap_text(comment['body_text'], pager.width-2, 1))
    pager.write()

##################################################
# Message Templates
##################################################


issue_tmp ="""%(body)s
# Please enter/edit a description for your issue above. You may use
# Markdown to format your text. Lines starting with a '#' will be
# ignored. A blank description will abort the action. To edit other
# attributes of an issue, edit the text after each colon below:
TITLE: %(title)s
ASSIGNEE: %(assignee)s
MILESTONE: %(milestone)s
LABELS: %(labels)s"""

comment_tmp ="""%(body)s
# Please enter/edit a comment above. You may use Markdown to format your 
# text. Lines starting with a '#' will be ignored. A blank description 
# will abort creation of the comment."""


##################################################
# Command Actions
##################################################


def init(args):
    """ Obtain and store token for future use. """
    auth = get_pass(args.user)
    desc = 'gh-issues-cli'
    token = None
    # First check for existing token
    r = requests.get('https://api.github.com/authorizations', auth=auth)
    if r.status_code == requests.codes.ok:
        tokens = json.loads(r.text)
        for t in tokens:
            if t['note'] == desc:
                token = t['token']
                break
    if not token:
        # Get new token
        r = requests.post('https://api.github.com/authorizations', auth=auth,
                    data=json.dumps({'scopes' : ['repo'], 'note': desc}))
        if r.status_code != requests.codes.ok:
            sys.exit('Request for token failed.')
        token = json.loads(r.text)['token']
    # Save token to git config
    g = ''
    if args._global:
        g = ' --global'
    try:
        check_call('git config%s github.token "%s"' % (g, token),
                    shell=True)
    except CalledProcessError as e:
        sys.exit('Failed saving token: %s' % e)
    print('Token for "%s" created and saved succesfully!' % desc)
    print('Visit https://github.com/settings/applications to "revoke" this token.')


def list(args):
    """ Run list command """
    url = '/repos/:user/:repo/issues'
    filters = clean_args(args, exclude_keys=['func', 'user'])
    issues = request('get', url, params=filters, auth=args.user)
    if issues:
        try:
            pager = Pager()
            cols = columns([6, 75, 19], pager.width-1)
            row = ' {number:>{cols[0]}} {title:<{cols[1]}} {labels:<{cols[2]}}'
            pager.write()
            pager.write(row.format(cols=cols, number='Num', title='Title', 
                                   labels='Labels'))
            pager.write(' ' + ' '.join(('='*cols[0], '='*cols[1], '='*cols[2])))
            for issue in issues:
                labels = ', '.join([x['name'] for x in issue['labels']])
                pager.write(row.format(cols=cols, number=issue['number'],
                                       title=truncate(issue['title'], cols[1]),
                                       labels=truncate(labels, cols[2])))
            pager.write()
        finally:
            pager.close()
    else:
        print('This repo has no issues matching the given filters.')


def new(args):
    """ Run new command """
    data = clean_args(args, exclude_keys=['func', 'user'])
    if data['body'] is None:
        data = get_message(data, issue_tmp,
                ['title', 'body', 'assignee', 'milestone', 'labels'])
    url = '/repos/:user/:repo/issues'
    issue = request('post', url, data=json.dumps(data), auth=args.user)
    print("Successfully created issue #%d:" % issue['number'], issue['title'])


def show(args):
    """ Run show command """
    url = '/repos/:user/:repo/issues/%s' % args.issue
    issue = request('get', url, auth=args.user)
    events = []
    if args.events:
        events = request('get', urljoin(url, 'events'), auth=args.user)
    try:
        pager = Pager()
        pager.write()
        pager.write(' Issue #{0[number]}: {0[title]}'.format(issue))
        pager.write(' ' + '='*(pager.width-2))
        pager.write()
        if issue['state'] == 'closed':
            pager.write(
                '     State: CLOSED (by {0[closed_by][login]})'.format(issue))
        else:
            pager.write('     State: OPEN')
        pager.write('      User: {0[user][login]}'.format(issue))
        if issue['assignee']:
            pager.write('  Assingee: {0[assignee][login]}'.format(issue))
        if issue['milestone']:
            pager.write(' Milestone: {0[milestone][title]}'.format(issue))
        if issue['labels']:
            pager.write('    Labels: ' + 
                        wrap_text(', '.join(l['name'] for l in issue['labels']),
                                  width=pager.width, indent=12).strip())
        pager.write('   Created: {0[created_at]}'.format(issue))
        if issue['updated_at'] and issue['updated_at'] != issue['created_at']:
            pager.write('   Updated: {0[updated_at]}'.format(issue))
        pager.write('  Comments: {0[comments]}'.format(issue))
        pager.write('\n ' + '-'*(pager.width-2) + '\n')
        pager.write(wrap_text(issue['body'], pager.width-2, 1))
        pager.write()
        pager.write(' ' + '-'*(pager.width-2))
        for event in events:
            if event['event'] in ['closed', 'reopened']:
                pager.write(' {0[actor][login]} {0[event]} this issue on'
                            ' {0[created_at]}\n'.format(event))
            if event['event'] in ['merged', 'referenced']:
                pager.write(' {0[actor][login]} {0[event]} this issue at'
                            ' {0[commit_id]}\n'.format(event))
            if event['event'] == 'assigned':
                pager.write(' This issue was assigned to {0[actor][login]}'
                            ' on {0[created_at]}\n'.format(event))
        if events: pager.write(' ' + '-'*(pager.width-2))
    finally:
        pager.close()


def edit(args):
    """ Run the edit command. """
    url = '/repos/:user/:repo/issues/%s' % args.issue
    data = clean_args(args, exclude_keys=['func', 'issue', 'user'])
    if not data:
        # Retrieve issue and display in editor
        data = request('get', url, auth=args.user)
        data = get_message(data, issue_tmp,
                ['title', 'body', 'assignee', 'state', 'milestone', 'labels'])
    # Sumbit new data
    issue = request('patch', url, data=json.dumps(data), auth=args.user)
    print("Successfully edited issue #%d:" % issue['number'], issue['title'])


def comment(args):
    if args.list:
        # List comments for an issue
        url = '/repos/:user/:repo/issues/%s/comments' % args.list
        comments = request('get', url, auth=args.user,
                headers={'Accept' : 'application/vnd.github.text+json'})
        if comments:
            try:
                pager = Pager()
                for comment in comments:
                    write_comment(pager, comment)
            finally:
                pager.close()
        else:
            sys.exit('No comments for issue #%s.' % args.list)

    elif args.show:
        # Show a comment by id.
        url = '/repos/:user/:repo/issues/comments/%s' % args.show
        comment = request('get', url, auth=args.user,
                headers={'Accept' : 'application/vnd.github.text+json'})
        try:
            pager = Pager()
            write_comment(pager, comment)
        finally: pager.close()

    elif args.new:
        # Create a comment
        data = clean_args(args, exclude_keys=['func', 'user'])
        if data['body'] is None:
            data = get_message(data, comment_tmp, ['body'])
        url = '/repos/:user/:repo/issues/%s/comments' % args.new
        comment = request('post', url, data=json.dumps(data), auth=args.user)
        print("Successfully created comment #%s on issue #%s." \
                            % (comment['id'], args.new))

    elif args.edit:
        # Edit a comment
        url = '/repos/:user/:repo/issues/comments/%s' % args.edit
        data = clean_args(args, exclude_keys=['func', 'user'])
        if data['body'] is None:
            # Retrieve comment and display in editor
            data = request('get', url, auth=args.user)
            data = get_message(data, comment_tmp, ['body'])
        # Submit new data
        comment = request('patch', url, data=json.dumps(data), auth=args.user)
        print("Successfully edited comment #%s on issue #%s." \
                            % (comment['id'], args.new))

    elif args.delete:
        # Delete a comment
        url = '/repos/:user/:repo/issues/comments/%s' % args.delete
        r = request('delete', url, auth=args.user)
        print("Successfully deleted comment #%s." % args.delete)


##################################################
# Command Line Parser
##################################################

message_epilog = 'If the BODY is not provided, a blank document ' \
                 'will be opened in GIT_EDITOR for a message ' \
                 'to be provided. If the editor is closed with ' \
                 'a blank document, the action will be aborted.'

# The "user" argument parser
user_psr = argparse.ArgumentParser(add_help=False)
user_psr.add_argument('-u', '--user',
                    help='Github Auth username and optional password',
                    metavar='USER[:PASS]')


# The "issue" command
parser = argparse.ArgumentParser(description="Manage Github Issues from the Command Line")
subparsers = parser.add_subparsers(title='Available Subcommands',
        description='Run "%(prog)s {subcommand} -h" for more information on each subcommand below.')


# The "list" command
ls_psr = subparsers.add_parser('list', parents=[user_psr],
                                help='List existing issues')
ls_psr.add_argument('-m', '--milestone', default=argparse.SUPPRESS,
    help='Filter by Milestone ID, "none" or "*" (default all)')
ls_psr.add_argument('--state', choices=['open', 'closed'],
                    default=argparse.SUPPRESS,
                    help='Filter by State, Default: "open"')
ls_psr.add_argument('-a', '--assignee', default=argparse.SUPPRESS,
                    help='Filter by Assignee')
ls_psr.add_argument('-@', '--mentioned', default=argparse.SUPPRESS,
                    help='Filter by @MentionedUser')
ls_psr.add_argument('-l', '--labels', nargs='+', default=argparse.SUPPRESS,
                    help='Filter by Labels')
ls_psr.add_argument('--sort', choices=['created', 'updated', 'comments'],
                    default=argparse.SUPPRESS,
                    help='Sort order, Default: "created"')
ls_psr.add_argument('-d', '--direction', choices=['asc', 'desc'],
                    default=argparse.SUPPRESS,
                    help='Sort direction, Default: "desc"')
ls_psr.add_argument('--since', default=argparse.SUPPRESS,
    help='Filter by date (string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ)')
ls_psr.set_defaults(func=list)


# The "new" command
new_psr = subparsers.add_parser('new', parents=[user_psr],
                help='Create a new issue', epilog=message_epilog)
new_psr.add_argument('title', help='Title of issue')
new_psr.add_argument('-m', '--message', dest='body',
                     help='Description of issue')
new_psr.add_argument('-a', '--assignee',
                    help='User this issue should be assigned to')
new_psr.add_argument('--milestone', type=int,
                     help='Milestone to associate this issue with')
new_psr.add_argument('-l', '--labels', nargs='+',
                     help='Labels to associate with this issue')
new_psr.set_defaults(func=new)

# The "show" command
show_psr = subparsers.add_parser('show', parents=[user_psr],
                help='Display an existing issue')
show_psr.add_argument('issue', type=int,
                      help='Issue ID number')
show_psr.add_argument('-e', '--events', action='store_true',
                      help='Show list of events.')
show_psr.set_defaults(func=show)

# The "edit" command
edt_psr = subparsers.add_parser('edit', parents=[user_psr],
                help='Edit an existing issue',
                epilog='If no flags are set, the entire issue ' \
                'will be opened as a document in the editor. ' \
                'If any flags are set, only the attributes ' \
                'defined will be updated.')
edt_psr.add_argument('issue', type=int, help='Issue ID number')
edt_psr.add_argument('-m', '--message', dest='body', default=argparse.SUPPRESS,
                     help='Edit Description of issue')
edt_psr.add_argument('-t', '--title', default=argparse.SUPPRESS,
                     help='Title of issue')
edt_psr.add_argument('-a', '--assignee', default=argparse.SUPPRESS,
                     help='User this issue should be assigned to')
edt_psr.add_argument('--milestone', type=int, default=argparse.SUPPRESS,
                     help='Milestone to associate this issue with')
edt_psr.add_argument('-l', '--labels' , nargs='+', default=argparse.SUPPRESS,
                     help='Labels to associate with this issue')
edt_psr.add_argument('-s', '--state', choices=['open', 'closed'],
                     default=argparse.SUPPRESS,
                     help='Set the State ("open" or "closed")')
edt_psr.set_defaults(func=edit)


# The "comment" command
cmnt_psr = subparsers.add_parser('comment', parents=[user_psr],
                 help='Comment on an existing issue',
                 epilog=message_epilog)
cmnt_gp = cmnt_psr.add_mutually_exclusive_group(required=True)
cmnt_gp.add_argument('-l', '--list',  metavar='ISSUE_ID',
                     help='List comments for given issue')
cmnt_gp.add_argument('-s', '--show', metavar='COMMENT_ID',
                     help='Display a comment')
cmnt_gp.add_argument('-n', '--new', metavar='ISSUE_ID',
                     help='Create a comment')
cmnt_gp.add_argument('-e', '--edit', metavar='COMMENT_ID',
                     help='Edit a comment')
cmnt_gp.add_argument('-d', '--delete', metavar='COMMENT_ID',
                     help='Delete a comment')
cmnt_psr.add_argument('-m', '--message', dest='body',
                      help='Comment body (use markdown for formatting)')
cmnt_psr.set_defaults(func=comment)


# The "init" command
init_psr = subparsers.add_parser('init', parents=[user_psr],
                                 help='Setup Auth.')
init_psr.add_argument('--global', action='store_true', dest='_global',
                      help='Save auth token to global git config')
init_psr.set_defaults(func=init)


if __name__ == '__main__':
    args = parser.parse_args()
    args.func(args)
